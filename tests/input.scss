// --------------------------------------------------
// IMPORT CONFIG
// --------------------------------------------------
@import 'config/manifest';


// --------------------------------------------------
// IMPORT PACKAGE
// --------------------------------------------------
@import '../sfco-sass-utils';


// --------------------------------------------------
// DO TESTS
// --------------------------------------------------
/*!
 * If test is successful, rule(s) below should include styles for:
 * - color: ...;
 * - color: ...;
 * - color: ...;
 * - font-family: ...;
 * - display: ...;
 * - overflow: ...;
 */
.test--functions {
    color: getColor( red );
    color: get-color( yellow, primary );
    color: get-color( purple, secondary );
    font-family: get-font( primary, display );
    display: get( $demoMap, display );
    overflow: get( $demoMap, overflow, hidden );
}


/*!
 * If test is successful, rule(s) below should include styles for:
 * - width: 75%;
 * - height: 400px;
 */
.test--functions--apply-aspect {
    width: apply-aspect( 3 4 );
    height: apply-aspect( 2 3, 600px );
}


/*!
 * If test is successful, rule(s) below should include styles for:
 * - content: ...;
 */
.test--functions:before,
.test--functions::before {
    content: "1200 is #{get-aspect( 1200 800 )} times larger than 800."
}


/*!
 * If test is successful, rule(s) below should include styles for:
 * - content: ...;
 */
.test--functions:after,
.test--functions::after {
    content: "300 is #{get-aspect( 400 300, false )*100} percent of 400."
}


/*!
 * If test is successful, rule(s) below should include styles for:
 * - background-image: ...;
 */
.test--functions--get-path {
    background-image: url(#{get-path( images )}/icon--share.png);
}


/*!
 * If test is successful, rule(s) below should include styles for:
 * - ...
 * - `margin` and `padding`;
 * - `:hover`;
 * - `:before`;
 * - `> :first-child`;
 */
.test--mixins {
    @include set( margin padding, 0 );

    @include on( hover ) {
        color: red;
    }

    @include pseudo( before ) {
        content: '';
        display: block;
    }

    @include descendant( first ) {
        color: blue;
    }
}


/*!
 * If test is successful, rule(s) below should include styles for:
 * - max-width;
 * - max-height;
 */
.test--mixins--max-size--1x-args {
    @include max-size( 50% );
}


/*!
 * If test is successful, rule(s) below should include styles for:
 * - max-width;
 * - max-height;
 */
.test--mixins--max-size--2x-args {
    @include max-size( 100% 400px );
}


/*!
 * If test is successful, rule(s) below should include styles for:
 * - min-width;
 * - min-width;
 */
.test--mixins--min-size--1x-args {
    @include min-size( 200px );
}


/*!
 * If test is successful, rule(s) below should include styles for:
 * - min-width;
 * - min-width;
 */
.test--mixins--min-size--2x-args {
    @include min-size( 25% 600px );
}


/*!
 * If test is successful, rule(s) below should include styles for:
 * - color;
 */
.test--mixins--parent {
    @include parent {
        color: red;
    }

    @include parent( div ) {
        color: blue;
    }

    @include parent( nav, '.is-active' ) {
        color: green;
    }

    @include parent( null, '[type="text"]' ) {
        color: yellow;
    }
}


/*!
 * If test is successful, rule(s) below should include styles for:
 * - font-size;
 * - font-weight;
 * - text-transform;
 */
.test--mixins--print-map {
    @include print-map( $fontStylesMap );
}


/*!
 * If test is successful, rule(s) below should include styles for:
 * - width;
 * - height;
 */
.text--mixins--dims--1x-value {
    @include dims( 100px );
}


/*!
 * If test is successful, rule(s) below should include styles for:
 * - width;
 * - height;
 */
.text--mixins--dims--2x-values {
    @include dims( 100% 200px );
}


/*!
 * If test is successful, rule(s) below should include styles for:
 * - width;
 */
.text--mixins--dims--2x-values-width-only {
    @include dims( 100% null );
}


/*!
 * If test is successful, rule(s) below should include styles for:
 * - height;
 */
.text--mixins--dims--2x-values-height-only {
    @include dims( null 200px );
}
