/*
@styleguide

@title get-path (@function)

TODO[@jrmykolyn] - Add description for `get-path()`.

NOTE: This function may also be invoked as `getPath()`

- @param {String} `$path-name`
- @param {String} `$submap`
- @return {String}

### Usage
```
// Input
.icon--share {
    background-image: url(#{get-path( images )}/icon--share.png);
}

// Output
.icon--share {
    background-image: url(./assets/images/icon--share.png);
}


// NOTE:
// Example above assumes that $pathMap includes the $submap 'default',
// which in turn has a key called `images` set to a value of `./assets/images`.
```
*/
@function get-path( $path-name, $submap: default ) {
    @return getPath( $path-name, $submap );
}

@function getPath( $path-name: null, $submap: default ) {
    $target: null;
    $paths: null;

    // Validate existence of 'path map' or error.
    @if ( global-variable-exists( pathMap ) ) {
        $target: $pathMap;
    } @else if ( global-variable-exists( path-map ) ) {
        $target: $path-map;
    } @else {
        @error 'Whoops! Please ensure that either of the following variables exist: `$pathMap`; `$path-map`.';
    }

    // Get target submap or error.
    @if ( map-has-key( $target, $submap ) ) {
        $paths: map-get( $target, $submap );
    } @else {
        @error 'Please ensure that the `#{$submap}` key exists, and is a list.';
    }

    // Return requested path or error.
    @if ( map-get( $paths, $path-name ) ) {
        @return map-get( $paths, $path-name );
    } @else {
        @error 'Map `#{$submap}` does not include key `#{$path-name}`.';
    }
}
