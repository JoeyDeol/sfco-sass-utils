/*
@styleguide

@title get-font (@function)

Function fetches the specified font from a 'set' of fonts, defined on $fontMap.

NOTE: This function may also be invoked as `getFont()`

- @param {String} `$font-name` - *The font to fetch.*
- @param {String} `$set` - *The set/group of fonts which contains `$font-name`.*
- @return {String}

### Usage
```
// Input
body {
    font-family: get-font( copy );
}

// Output
body {
    font-family: "Times New Roman", serif;
}


// NOTE:
// Example above assumes that $fontMap includes the $set 'default',
// which in turn has a key called 'copy' set to a value of "'Times New Roman', serif".
```
```
// Input
h1 {
    font-family: get-font( primary, display );
}

// Output
h1 {
    font-family: "Helvetica", "Arial", sans-serif;
}

// NOTE:
// Example above assumes that $fontMap includes the $set 'display',
// which in turn has a key called 'primary' set to a value of "'Helvetica', 'Arial', serif".
```
*/
@function get-font( $font-name, $set: default ) {
    @return getFont( $font-name, $set );
}

@function getFont( $font-name, $set: default ) {
    $target: null;
    $fonts: null;

    // Validate existence of 'font map' or error.
    @if ( global-variable-exists( fontMap ) ) {
        $target: $fontMap;
    } @else if ( global-variable-exists( font-map ) ) {
      $target: $font-map;
    } @else {
        @error 'Whoops! Please ensure that either of the following variables exist: `$fontMap`; `$font-map`.';
    }

    // Get target submap or error.
    @if ( map-has-key( $target, $set ) ) {
        $fonts: map-get( $target, $set );
    } @else {
        @error 'Please ensure that the `#{$set}` key exists, and is a list.';
    }

    // Return requested font or error.
    @if ( map-has-key( $fonts, $font-name ) ) {
        @return map-get( $fonts, $font-name );
    } @else {
        @error 'Map `#{$set}` does not include key `#{$font-name}`.';
    }
}
