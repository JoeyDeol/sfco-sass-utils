/*
@styleguide

@title getColor (@function)

Function fetches the specified color from a 'set' of colors, defined on $colorMap.

- @param {String} `$colorName` - *The color to fetch.*
- @param {String} `$colorSet` - *The set/group of colors which contains `$colorName`.*
- @return {String}

### Usage
```
// Input
p {
    color: getColor( black );
}

// Output
p {
    color: #000;
}


// NOTE:
// Example above assumes that $colorMap includes the key 'black', set to a value of #000.
```
```
// Input
h1 {
    background-color: getColor( base, placeholder );
}

// Output
h1 {
    background-color: #FAFAFA;
}

// NOTE:
// Example above assumes that $colorMap includes the $colorSet 'placeholder',
// which in turn has a key called 'base' set to value of #FAFAFA.
```
*/
@function get-color( $color-name, $color-set: base ) {
    @return getColor( $color-name, $color-set );
}

@function getColor( $colorName, $colorSet: base ) {
  $target: null;
  $colors: null;

  // Validate existence of 'color map' or error.
  @if global-variable-exists( colorMap ) {
      $target: $colorMap;
  } @else if global-variable-exists( color-map ) {
      $target: $color-map;
  } @else {
    @error 'Whoops! Please ensure that either of the following variables exists: `$colorMap`; `$color-map`.';
  }

  // Grab target submap or error.
  @if map-has-key( $colorMap, $colorSet ) {
    $colors: map-get( $colorMap, $colorSet );
  } @else {
    @error 'Please ensure that the `#{$colorSet}` key exists, and is a list.';
  }

  // Return requested color or error.
  @if map-has-key( $colors, $colorName ) {
    @return map-get( $colors, $colorName );
  } @else {
    @error 'Map `#{$colorSet}` does not include key `#{$colorName}`.';
  }
}