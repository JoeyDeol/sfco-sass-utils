/*
@styleguide

@title get-color (@function)

Function fetches the specified color from a 'set' of colors, defined on $color-map.

NOTE: This function may also be invoked as `getColor()`

- @param {String} `$color-name` - *The color to fetch.*
- @param {String} `$color-set` - *The set/group of colors which contains `$color-name`.*
- @return {String}

### Usage
```
// Input
p {
    color: get-color( black );
}

// Output
p {
    color: #000;
}


// NOTE:
// Example above assumes that $color-map includes the key 'black', set to a value of #000.
```
```
// Input
h1 {
    background-color: get-color( base, placeholder );
}

// Output
h1 {
    background-color: #FAFAFA;
}

// NOTE:
// Example above assumes that $color-map includes the $color-set 'placeholder',
// which in turn has a key called 'base' set to value of #FAFAFA.
```
*/
@function get-color( $color-name, $color-set: default ) {
    @return getColor( $color-name, $color-set );
}

@function getColor( $color-name, $color-set: default ) {
    $target: null;
    $colors: null;

    // Validate existence of 'color map' or error.
    @if global-variable-exists( colorMap ) {
        $target: $colorMap;
    } @else if global-variable-exists( color-map ) {
        $target: $color-map;
    } @else {
        @error 'Whoops! Please ensure that either of the following variables exist: `$colorMap`; `$color-map`.';
    }

    // Grab target submap or error.
    @if map-has-key( $target, $color-set ) {
        $colors: map-get( $target, $color-set );
    // NOTE: Coerce argument and display warning if:
    // - Function invoked with 'default'.
    // - Author's color map DOES NOT contain 'default'.
    // - Author's color map DOES contain 'base'.
    /// TODO: Remove warning/throw error as part of next major release.
    } @else if $color-set == 'default' and map-has-key( $target, 'base' ) {
        @warn 'Color map contains a legacy default key: "base". Change the "base" key to "default" in order to continue invoking `get-color()` without a second argument. Currently, "base" is coerced to "default" at compile time. This behavior will be removed as part of the next major release.';
        $colors: map-get( $target, 'base' );
    } @else {
        @error 'Please ensure that the `#{$color-set}` key exists, and is a list.';
    }

    // Return requested color or error.
    @if map-has-key( $colors, $color-name ) {
        @return map-get( $colors, $color-name );
    } @else {
        @error 'Map `#{$color-set}` does not include key `#{$color-name}`.';
    }
}
